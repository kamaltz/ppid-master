import { NextRequest, NextResponse } from 'next/server';
import { rateLimit } from './rateLimiter';
import { getClientIP, getUserAgent } from './ipUtils';
import { addAPISecurityHeaders } from './securityHeaders';

// Suspicious patterns in User-Agent
const MALICIOUS_USER_AGENTS = [
  /sqlmap/i,
  /nikto/i,
  /nmap/i,
  /masscan/i,
  /zap/i,
  /burp/i,
  /w3af/i,
  /acunetix/i,
  /nessus/i,
  /openvas/i,
  /qualys/i,
  /rapid7/i,
  /metasploit/i,
  /havij/i,
  /pangolin/i,
  /jsql/i,
  /bsqlbf/i,
  /sqlninja/i,
  /sqlsus/i,
  /bbqsql/i,
  /NoSQLMap/i,
  /commix/i,
  /xsser/i,
  /beef/i,
  /skipfish/i,
  /wpscan/i,
  /dirb/i,
  /dirbuster/i,
  /gobuster/i,
  /ffuf/i,
  /wfuzz/i,
  /hydra/i,
  /medusa/i,
  /brutespray/i,
  /patator/i,
  /crowbar/i,
  /john/i,
  /hashcat/i,
  /aircrack/i,
  /reaver/i,
  /bully/i,
  /pixiewps/i,
  /wash/i,
  /aireplay/i,
  /airodump/i,
  /airmon/i,
  /kismet/i,
  /wireshark/i,
  /tcpdump/i,
  /ngrep/i,
  /ettercap/i,
  /dsniff/i,
  /arpspoof/i,
  /macchanger/i,
  /netdiscover/i,
  /arp-scan/i,
  /masscan/i,
  /unicornscan/i,
  /hping/i,
  /scapy/i,
  /nemesis/i,
  /packeth/i,
  /ostinato/i,
  /colasoft/i,
  /solarwinds/i,
  /paessler/i,
  /nagios/i,
  /zabbix/i,
  /cacti/i,
  /observium/i,
  /librenms/i,
  /pandora/i,
  /centreon/i,
  /icinga/i,
  /shinken/i,
  /sensu/i,
  /riemann/i,
  /bosun/i,
  /kapacitor/i,
  /telegraf/i,
  /collectd/i,
  /statsd/i,
  /graphite/i,
  /influxdb/i,
  /prometheus/i,
  /grafana/i,
  /kibana/i,
  /logstash/i,
  /elasticsearch/i,
  /splunk/i,
  /fluentd/i,
  /rsyslog/i,
  /syslog-ng/i,
  /graylog/i,
  /loggly/i,
  /papertrail/i,
  /sumologic/i,
  /datadog/i,
  /newrelic/i,
  /appdynamics/i,
  /dynatrace/i,
  /pingdom/i,
  /uptimerobot/i,
  /statuscake/i,
  /site24x7/i,
  /monitis/i,
  /nodeping/i,
  /alertsite/i,
  /gomez/i,
  /keynote/i,
  /neustar/i,
  /catchpoint/i,
  /thousandeyes/i,
  /cedexis/i,
  /cloudflare/i,
  /fastly/i,
  /maxcdn/i,
  /keycdn/i,
  /stackpath/i,
  /bunnycdn/i,
  /jsdelivr/i,
  /unpkg/i,
  /cdnjs/i,
  /bootcdn/i,
  /staticfile/i,
  /360wzb/i,
  /baidu/i,
  /tencent/i,
  /alibaba/i,
  /qiniu/i,
  /upyun/i,
  /chinacache/i,
  /wangsu/i,
  /ksyun/i,
  /ucloud/i,
  /qingcloud/i,
  /vultr/i,
  /linode/i,
  /digitalocean/i,
  /hetzner/i,
  /ovh/i,
  /scaleway/i,
  /rackspace/i,
  /godaddy/i,
  /namecheap/i,
  /bluehost/i,
  /hostgator/i,
  /siteground/i,
  /a2hosting/i,
  /inmotion/i,
  /dreamhost/i,
  /hostinger/i,
  /000webhost/i,
  /freehosting/i,
  /x10hosting/i,
  /byethost/i,
  /awardspace/i,
  /freehostia/i,
  /biz\.nf/i,
  /cu\.cc/i,
  /heliohost/i,
  /zymic/i,
  /110mb/i,
  /5gbfree/i,
  /freewebhostingarea/i,
  /freehostingnoads/i,
  /infinityfree/i,
  /profreehost/i,
  /freehosting/i,
  /000webhost/i,
  /x10hosting/i,
  /byethost/i,
  /awardspace/i,
  /freehostia/i,
  /biz\.nf/i,
  /cu\.cc/i,
  /heliohost/i,
  /zymic/i,
  /110mb/i,
  /5gbfree/i,
  /freewebhostingarea/i,
  /freehostingnoads/i,
  /infinityfree/i,
  /profreehost/i
];

// Blocked file extensions in requests
const BLOCKED_EXTENSIONS = [
  '.php', '.asp', '.aspx', '.jsp', '.cgi', '.pl', '.py', '.rb', '.sh', '.bat', '.cmd',
  '.exe', '.dll', '.so', '.dylib', '.jar', '.war', '.ear', '.zip', '.rar', '.7z',
  '.tar', '.gz', '.bz2', '.xz', '.sql', '.db', '.sqlite', '.mdb', '.accdb',
  '.bak', '.backup', '.old', '.tmp', '.temp', '.log', '.conf', '.config', '.ini',
  '.env', '.htaccess', '.htpasswd', '.git', '.svn', '.hg', '.bzr'
];

// Suspicious query parameters
const SUSPICIOUS_PARAMS = [
  'union', 'select', 'insert', 'update', 'delete', 'drop', 'create', 'alter',
  'exec', 'execute', 'sp_', 'xp_', 'cmd', 'shell', 'system', 'eval', 'base64',
  'javascript:', 'vbscript:', 'data:', 'file:', 'ftp:', 'gopher:', 'ldap:',
  'dict:', 'finger:', 'tftp:', 'telnet:', 'ssh:', 'pop3:', 'imap:', 'smtp:',
  'nntp:', 'news:', 'snews:', 'ldaps:', 'ldapi:', 'cldap:', 'mailto:',
  'mid:', 'cid:', 'prospero:', 'wais:', 'z39.50r:', 'z39.50s:', 'vemmi:',
  'go:', 'h323:', 'ipp:', 'iris:', 'iris.beep:', 'iris.xpc:', 'iris.xpcs:',
  'iris.lwz:', 'service:', 'sip:', 'sips:', 'tag:', 'tel:', 'urn:', 'uuid:',
  'aaa:', 'aaas:', 'acap:', 'cap:', 'crid:', 'dav:', 'dict:', 'dns:', 'fax:',
  'geo:', 'im:', 'info:', 'ipp:', 'iris:', 'ldap:', 'mailto:', 'mid:', 'news:',
  'nfs:', 'nntp:', 'opaquelocktoken:', 'pop:', 'pres:', 'rtsp:', 'service:',
  'shttp:', 'sip:', 'sips:', 'snmp:', 'soap.beep:', 'soap.beeps:', 'tag:',
  'tel:', 'telnet:', 'tftp:', 'thismessage:', 'tip:', 'tv:', 'urn:', 'vemmi:',
  'xmlrpc.beep:', 'xmlrpc.beeps:', 'xmpp:', 'z39.50r:', 'z39.50s:'
];

export interface SecurityCheckResult {
  allowed: boolean;
  reason?: string;
  statusCode?: number;
}

export function checkUserAgentSecurity(userAgent: string): SecurityCheckResult {
  if (!userAgent || userAgent.length < 5) {
    return {
      allowed: false,
      reason: 'Missing or invalid User-Agent',
      statusCode: 400
    };
  }

  if (userAgent.length > 2000) {
    return {
      allowed: false,
      reason: 'User-Agent too long',
      statusCode: 400
    };
  }

  // Only check for obvious security tools, not legitimate browsers
  const securityTools = [
    /sqlmap/i, /nikto/i, /nmap/i, /burp/i, /zap/i,
    /acunetix/i, /nessus/i, /wpscan/i, /dirb/i, /gobuster/i
  ];

  for (const pattern of securityTools) {
    if (pattern.test(userAgent)) {
      return {
        allowed: false,
        reason: 'Security tool detected',
        statusCode: 403
      };
    }
  }

  return { allowed: true };
}

export function checkRequestSecurity(request: NextRequest): SecurityCheckResult {
  const url = request.nextUrl;
  const pathname = url.pathname.toLowerCase();
  const searchParams = url.searchParams;

  // Check for blocked file extensions
  for (const ext of BLOCKED_EXTENSIONS) {
    if (pathname.endsWith(ext)) {
      return {
        allowed: false,
        reason: 'Blocked file extension',
        statusCode: 403
      };
    }
  }

  // Check for suspicious parameters
  for (const [key, value] of searchParams.entries()) {
    const keyLower = key.toLowerCase();
    const valueLower = value.toLowerCase();

    for (const suspiciousParam of SUSPICIOUS_PARAMS) {
      if (keyLower.includes(suspiciousParam) || valueLower.includes(suspiciousParam)) {
        return {
          allowed: false,
          reason: 'Suspicious parameter detected',
          statusCode: 403
        };
      }
    }
  }

  // Check for path traversal attempts
  if (pathname.includes('../') || pathname.includes('..\\') || 
      pathname.includes('%2e%2e') || pathname.includes('%252e%252e')) {
    return {
      allowed: false,
      reason: 'Path traversal attempt detected',
      statusCode: 403
    };
  }

  // Check for common attack patterns in path
  const attackPatterns = [
    /\/etc\/passwd/i,
    /\/proc\/self\/environ/i,
    /\/windows\/system32/i,
    /\/boot\.ini/i,
    /\/web\.config/i,
    /\/wp-config\.php/i,
    /\/config\.php/i,
    /\/database\.php/i,
    /\/settings\.php/i,
    /\/admin\.php/i,
    /\/login\.php/i,
    /\/phpmyadmin/i,
    /\/adminer/i,
    /\/phpinfo/i,
    /\/test\.php/i,
    /\/info\.php/i,
    /\/shell\.php/i,
    /\/backdoor/i,
    /\/webshell/i,
    /\/c99/i,
    /\/r57/i,
    /\/b374k/i,
    /\/wso/i,
    /\/p0wny/i,
    /\/alfa/i,
    /\/indoxploit/i,
    /\/mini/i,
    /\/simple/i,
    /\/bypass/i,
    /\/upload/i,
    /\/uploader/i,
    /\/filemanager/i,
    /\/file_manager/i,
    /\/files/i,
    /\/dir/i,
    /\/directory/i,
    /\/folder/i,
    /\/path/i,
    /\/browse/i,
    /\/explorer/i,
    /\/manager/i,
    /\/admin/i,
    /\/administrator/i,
    /\/root/i,
    /\/user/i,
    /\/users/i,
    /\/account/i,
    /\/accounts/i,
    /\/profile/i,
    /\/profiles/i,
    /\/member/i,
    /\/members/i,
    /\/client/i,
    /\/clients/i,
    /\/customer/i,
    /\/customers/i,
    /\/guest/i,
    /\/guests/i,
    /\/visitor/i,
    /\/visitors/i,
    /\/public/i,
    /\/private/i,
    /\/secure/i,
    /\/security/i,
    /\/auth/i,
    /\/authentication/i,
    /\/authorization/i,
    /\/login/i,
    /\/logout/i,
    /\/signin/i,
    /\/signout/i,
    /\/register/i,
    /\/registration/i,
    /\/signup/i,
    /\/join/i,
    /\/subscribe/i,
    /\/unsubscribe/i,
    /\/activate/i,
    /\/deactivate/i,
    /\/enable/i,
    /\/disable/i,
    /\/lock/i,
    /\/unlock/i,
    /\/ban/i,
    /\/unban/i,
    /\/block/i,
    /\/unblock/i,
    /\/delete/i,
    /\/remove/i,
    /\/destroy/i,
    /\/drop/i,
    /\/truncate/i,
    /\/clear/i,
    /\/reset/i,
    /\/restore/i,
    /\/backup/i,
    /\/export/i,
    /\/import/i,
    /\/download/i,
    /\/upload/i,
    /\/install/i,
    /\/uninstall/i,
    /\/setup/i,
    /\/config/i,
    /\/configuration/i,
    /\/settings/i,
    /\/options/i,
    /\/preferences/i,
    /\/properties/i,
    /\/parameters/i,
    /\/variables/i,
    /\/constants/i,
    /\/defines/i,
    /\/includes/i,
    /\/requires/i,
    /\/imports/i,
    /\/exports/i,
    /\/modules/i,
    /\/plugins/i,
    /\/extensions/i,
    /\/addons/i,
    /\/widgets/i,
    /\/components/i,
    /\/libraries/i,
    /\/frameworks/i,
    /\/templates/i,
    /\/themes/i,
    /\/skins/i,
    /\/styles/i,
    /\/css/i,
    /\/js/i,
    /\/javascript/i,
    /\/scripts/i,
    /\/images/i,
    /\/img/i,
    /\/pics/i,
    /\/pictures/i,
    /\/photos/i,
    /\/media/i,
    /\/assets/i,
    /\/resources/i,
    /\/static/i,
    /\/public/i,
    /\/www/i,
    /\/web/i,
    /\/site/i,
    /\/sites/i,
    /\/page/i,
    /\/pages/i,
    /\/content/i,
    /\/contents/i,
    /\/data/i,
    /\/database/i,
    /\/db/i,
    /\/sql/i,
    /\/mysql/i,
    /\/postgresql/i,
    /\/oracle/i,
    /\/mssql/i,
    /\/sqlite/i,
    /\/mongodb/i,
    /\/redis/i,
    /\/memcached/i,
    /\/cache/i,
    /\/tmp/i,
    /\/temp/i,
    /\/temporary/i,
    /\/log/i,
    /\/logs/i,
    /\/error/i,
    /\/errors/i,
    /\/debug/i,
    /\/trace/i,
    /\/dump/i,
    /\/dumps/i,
    /\/core/i,
    /\/crash/i,
    /\/exception/i,
    /\/exceptions/i,
    /\/warning/i,
    /\/warnings/i,
    /\/notice/i,
    /\/notices/i,
    /\/info/i,
    /\/information/i,
    /\/status/i,
    /\/health/i,
    /\/ping/i,
    /\/test/i,
    /\/tests/i,
    /\/testing/i,
    /\/qa/i,
    /\/quality/i,
    /\/assurance/i,
    /\/dev/i,
    /\/development/i,
    /\/staging/i,
    /\/production/i,
    /\/prod/i,
    /\/live/i,
    /\/beta/i,
    /\/alpha/i,
    /\/demo/i,
    /\/sample/i,
    /\/example/i,
    /\/examples/i,
    /\/tutorial/i,
    /\/tutorials/i,
    /\/guide/i,
    /\/guides/i,
    /\/help/i,
    /\/support/i,
    /\/faq/i,
    /\/about/i,
    /\/contact/i,
    /\/feedback/i,
    /\/report/i,
    /\/reports/i,
    /\/statistics/i,
    /\/stats/i,
    /\/analytics/i,
    /\/metrics/i,
    /\/monitor/i,
    /\/monitoring/i,
    /\/dashboard/i,
    /\/panel/i,
    /\/control/i,
    /\/console/i,
    /\/terminal/i,
    /\/shell/i,
    /\/cmd/i,
    /\/command/i,
    /\/execute/i,
    /\/run/i,
    /\/exec/i,
    /\/system/i,
    /\/os/i,
    /\/kernel/i,
    /\/boot/i,
    /\/init/i,
    /\/service/i,
    /\/services/i,
    /\/daemon/i,
    /\/daemons/i,
    /\/process/i,
    /\/processes/i,
    /\/task/i,
    /\/tasks/i,
    /\/job/i,
    /\/jobs/i,
    /\/queue/i,
    /\/queues/i,
    /\/worker/i,
    /\/workers/i,
    /\/thread/i,
    /\/threads/i,
    /\/session/i,
    /\/sessions/i,
    /\/cookie/i,
    /\/cookies/i,
    /\/token/i,
    /\/tokens/i,
    /\/key/i,
    /\/keys/i,
    /\/secret/i,
    /\/secrets/i,
    /\/password/i,
    /\/passwords/i,
    /\/hash/i,
    /\/hashes/i,
    /\/salt/i,
    /\/salts/i,
    /\/encrypt/i,
    /\/encryption/i,
    /\/decrypt/i,
    /\/decryption/i,
    /\/cipher/i,
    /\/ciphers/i,
    /\/crypto/i,
    /\/cryptography/i,
    /\/ssl/i,
    /\/tls/i,
    /\/https/i,
    /\/certificate/i,
    /\/certificates/i,
    /\/cert/i,
    /\/certs/i,
    /\/ca/i,
    /\/authority/i,
    /\/pki/i,
    /\/x509/i,
    /\/rsa/i,
    /\/dsa/i,
    /\/ecdsa/i,
    /\/ed25519/i,
    /\/aes/i,
    /\/des/i,
    /\/3des/i,
    /\/blowfish/i,
    /\/twofish/i,
    /\/serpent/i,
    /\/camellia/i,
    /\/cast/i,
    /\/idea/i,
    /\/rc4/i,
    /\/rc5/i,
    /\/rc6/i,
    /\/tea/i,
    /\/xtea/i,
    /\/skipjack/i,
    /\/safer/i,
    /\/gost/i,
    /\/mars/i,
    /\/rijndael/i,
    /\/square/i,
    /\/khazad/i,
    /\/anubis/i,
    /\/noekeon/i,
    /\/shark/i,
    /\/cast128/i,
    /\/cast256/i,
    /\/loki97/i,
    /\/magenta/i,
    /\/e2/i,
    /\/crypton/i,
    /\/clefia/i,
    /\/seed/i,
    /\/aria/i,
    /\/lea/i,
    /\/simon/i,
    /\/speck/i,
    /\/threefish/i,
    /\/skein/i,
    /\/blake/i,
    /\/groestl/i,
    /\/jh/i,
    /\/keccak/i,
    /\/sha3/i,
    /\/whirlpool/i,
    /\/tiger/i,
    /\/ripemd/i,
    /\/haval/i,
    /\/panama/i,
    /\/radiogatun/i,
    /\/cubehash/i,
    /\/echo/i,
    /\/fugue/i,
    /\/hamsi/i,
    /\/luffa/i,
    /\/shabal/i,
    /\/shavite/i,
    /\/simd/i,
    /\/bmw/i,
    /\/cheetah/i,
    /\/lake/i,
    /\/lesamnta/i,
    /\/md6/i,
    /\/sarmal/i,
    /\/tangle/i,
    /\/twister/i,
    /\/vortex/i,
    /\/waterfall/i,
    /\/edon/i,
    /\/essence/i,
    /\/aurora/i,
    /\/boole/i,
    /\/crunch/i,
    /\/dcrypt/i,
    /\/dynamic/i,
    /\/enrupt/i,
    /\/fsh/i,
    /\/hash2x/i,
    /\/khichidi/i,
    /\/lash/i,
    /\/mcssha/i,
    /\/meshhash/i,
    /\/nasha/i,
    /\/peach/i,
    /\/ponic/i,
    /\/rasha/i,
    /\/saphir/i,
    /\/smash/i,
    /\/spectral/i,
    /\/streebog/i,
    /\/sum/i,
    /\/swifft/i,
    /\/tesla/i,
    /\/triad/i,
    /\/zk/i
  ];

  for (const pattern of attackPatterns) {
    if (pattern.test(pathname)) {
      return {
        allowed: false,
        reason: 'Suspicious path pattern detected',
        statusCode: 403
      };
    }
  }

  return { allowed: true };
}

export function apiSecurityMiddleware(request: NextRequest): NextResponse | null {
  const userAgent = getUserAgent(request);
  const clientIP = getClientIP(request);

  // Check User-Agent security
  const userAgentCheck = checkUserAgentSecurity(userAgent);
  if (!userAgentCheck.allowed) {
    return NextResponse.json(
      { error: userAgentCheck.reason },
      { status: userAgentCheck.statusCode || 403 }
    );
  }

  // Check request security
  const requestCheck = checkRequestSecurity(request);
  if (!requestCheck.allowed) {
    return NextResponse.json(
      { error: requestCheck.reason },
      { status: requestCheck.statusCode || 403 }
    );
  }

  // Rate limiting for API endpoints
  const rateLimitResult = rateLimit(`api:${clientIP}`, 100, 60000); // 100 requests per minute
  if (!rateLimitResult.success) {
    const errorResponse = NextResponse.json(
      { error: 'Rate limit exceeded' },
      { 
        status: 429,
        headers: {
          'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()
        }
      }
    );
    return addAPISecurityHeaders(errorResponse);
  }

  return null; // Allow request to proceed
}